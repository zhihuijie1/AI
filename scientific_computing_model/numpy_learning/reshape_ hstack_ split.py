import numpy as np


def test():
    # ----------------------- 改变数组的维度 ----------------------
    a = np.arange(24)
    print(a.shape)  # (24,)
    a = a.reshape((3, 8))
    print(a)
    '''
    [[ 0  1  2  3  4  5  6  7]
    [ 8  9 10 11 12 13 14 15]
    [16 17 18 19 20 21 22 23]]
    '''
    b = a.reshape((2, 3, 4))
    print(b)
    '''
    [[[ 0  1  2  3]
    [ 4  5  6  7]
    [ 8  9 10 11]]

    [[12 13 14 15]
    [16 17 18 19]
    [20 21 22 23]]]
    '''

    # 使用ravel函数将三维的b变成一维的数组
    print(b.ravel())
    # [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

    # 使用flatten函数将三维的b变成一维的数组
    print(b.flatten())
    # [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

    # ---------------------------数组的拼接-------------------------

    x = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
    print(x)
    '''
    [[ 1  2  3  4]
    [ 5  6  7  8]
    [ 9 10 11 12]]
    '''
    y = np.array([['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']])
    print(y)
    '''
    [['a' 'b' 'c' 'd']
    ['e' 'f' 'g' 'h']
    ['i' 'j' 'k' 'l']]
    '''

    # 使用hstack对多部份的数组进行水平拼接,注意水平拼接的数组的行数一定是相同的，列可以不同
    print(np.hstack([x, y]))
    '''
    [['1' '2' '3' '4' 'a' 'b' 'c' 'd']
    ['5' '6' '7' '8' 'e' 'f' 'g' 'h']
    ['9' '10' '11' '12' 'i' 'j' 'k' 'l']]
    '''

    # 使用vstack对多部份的数组进行垂直拼接,注意垂直拼接的数组的列数一定是相同的，行数可以不同
    print(np.vstack([x, y]))
    '''
    [['1' '2' '3' '4']
    ['5' '6' '7' '8']
    ['9' '10' '11' '12']
    ['a' 'b' 'c' 'd']
    ['e' 'f' 'g' 'h']
    ['i' 'j' 'k' 'l']]
    '''

    print(np.concatenate([x, y], axis=1))  # 水平拼接
    print(np.concatenate([x, y], axis=0))  # 垂直拼接

    # 三维数的拼接

    aa = np.arange(1, 37).reshape(3, 4, 3)
    bb = np.arange(101, 137).reshape(3, 4, 3)
    print(aa)
    print("-----------------")
    print(bb)
    '''
    [[[ 1  2  3]
  [ 4  5  6]
  [ 7  8  9]
  [10 11 12]]

 [[13 14 15]
  [16 17 18]
  [19 20 21]
  [22 23 24]]

 [[25 26 27]
  [28 29 30]
  [31 32 33]
  [34 35 36]]]
-----------------
[[[101 102 103]
  [104 105 106]
  [107 108 109]
  [110 111 112]]

 [[113 114 115]
  [116 117 118]
  [119 120 121]
  [122 123 124]]

 [[125 126 127]
  [128 129 130]
  [131 132 133]
  [134 135 136]]]
    '''
    print(np.concatenate([aa, bb], axis=0).shape)  # (6, 4, 3)
    print(np.concatenate([aa, bb], axis=1).shape)  # (3, 8, 3)
    print(np.concatenate([aa, bb], axis=2).shape)  # (3, 4, 6)

    # 数组的分隔

    # split分割一维数组
    x = np.arange(10, 20)
    print(np.split(x, 5))  # 后面是分割的个数/分割的范围
    print(np.split(x, [3, 6]))
    '''
    [array([10, 11]), array([12, 13]), array([14, 15]), array([16, 17]), array([18, 19])]
    [array([10, 11, 12]), array([13, 14, 15]), array([16, 17, 18, 19])]
    '''

    # split分割二维数组

    a = np.array([[1, 2, 3, 10], [4, 5, 6, 100], [11, 12, 13, 1000], [14, 15, 16, 10000]])
    print(a)
    '''
    [[    1     2     3    10]
    [    4     5     6   100]
    [   11    12    13  1000]
    [   14    15    16 10000]]
    '''
    # 水平分割

    print(np.split(a, 2, axis=0))
    '''
    [array([[  1,   2,   3,  10],
       [  4,   5,   6, 100]]), array([[   11,    12,    13,  1000],
       [   14,    15,    16, 10000]])]
    '''
    # 垂直分割
    print(np.split(a, 2, axis=1))
    '''
    [array([[ 1,  2],
       [ 4,  5],
       [11, 12],
       [14, 15]]), array([[    3,    10],
       [    6,   100],
       [   13,  1000],
       [   16, 10000]])]
    '''

    # 垂直方向按位置分割
    print(np.split(a, [1, 3], axis=1))
    '''
    [array([[ 1],
       [ 4],
       [11],
       [14]]), array([[ 2,  3],
       [ 5,  6],
       [12, 13],
       [15, 16]]), array([[   10],
       [  100],
       [ 1000],
       [10000]])]
    '''

    # transpose函数进行转置
    x = np.arange(24)
    a = x.reshape((3, 8))
    b = a.transpose()
    c = x.reshape(2, 3, 4)
    d = c.transpose()
    print(a.shape, "----", b.shape, "----", c.shape, "----", d.shape)
    # (3, 8) ---- (8, 3) ---- (2, 3, 4) ---- (4, 3, 2)


if __name__ == '__main__':
    test()
